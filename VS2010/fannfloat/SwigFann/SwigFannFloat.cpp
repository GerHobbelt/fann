/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_SwigFannFloat(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_SwigFannFloat(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_SwigFannFloat(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "fann.h"
#include "fann_cpp.h"
#include "fann_error.h"
#include "fann_data.h"
#include "fann_data_cpp.h"
#include "fann_training_data_cpp.h"
#include "stdio.h"


#include <string>


typedef FANN::connection connectionArray;

SWIGINTERN connectionArray *new_connectionArray(int nelements){
  return new FANN::connection[nelements]();
}
SWIGINTERN void delete_connectionArray(connectionArray *self){
  delete [] self;
}
SWIGINTERN FANN::connection connectionArray_getitem(connectionArray *self,int index){
  return self[index];
}
SWIGINTERN void connectionArray_setitem(connectionArray *self,int index,FANN::connection value){
  self[index] = value;
}
SWIGINTERN FANN::connection *connectionArray_cast(connectionArray *self){
  return self;
}
SWIGINTERN connectionArray *connectionArray_frompointer(FANN::connection *t){
  return (connectionArray *) t;
}

	typedef float* float_ptr;
    typedef float fann_type;
	typedef fann_connection connection;
	typedef FANN::training_algorithm_enum training_algorithm_enum;
	typedef FANN::activation_function_enum activation_function_enum;
	typedef FANN::error_function_enum error_function_enum;
	typedef FANN::network_type_enum network_type_enum;
	typedef FANN::stop_function_enum stop_function_enum;


typedef float_ptr floatArrayArray;

SWIGINTERN floatArrayArray *new_floatArrayArray(int nelements){
  return new float_ptr[nelements]();
}
SWIGINTERN void delete_floatArrayArray(floatArrayArray *self){
  delete [] self;
}
SWIGINTERN float_ptr floatArrayArray_getitem(floatArrayArray *self,int index){
  return self[index];
}
SWIGINTERN void floatArrayArray_setitem(floatArrayArray *self,int index,float_ptr value){
  self[index] = value;
}
SWIGINTERN float_ptr *floatArrayArray_cast(floatArrayArray *self){
  return self;
}
SWIGINTERN floatArrayArray *floatArrayArray_frompointer(float_ptr *t){
  return (floatArrayArray *) t;
}

typedef float floatArray;

SWIGINTERN floatArray *new_floatArray(int nelements){
  return new float[nelements]();
}
SWIGINTERN void delete_floatArray(floatArray *self){
  delete [] self;
}
SWIGINTERN float floatArray_getitem(floatArray *self,int index){
  return self[index];
}
SWIGINTERN void floatArray_setitem(floatArray *self,int index,float value){
  self[index] = value;
}
SWIGINTERN float *floatArray_cast(floatArray *self){
  return self;
}
SWIGINTERN floatArray *floatArray_frompointer(float *t){
  return (floatArray *) t;
}

typedef unsigned int uintArray;

SWIGINTERN uintArray *new_uintArray(int nelements){
  return new unsigned int[nelements]();
}
SWIGINTERN void delete_uintArray(uintArray *self){
  delete [] self;
}
SWIGINTERN unsigned int uintArray_getitem(uintArray *self,int index){
  return self[index];
}
SWIGINTERN void uintArray_setitem(uintArray *self,int index,unsigned int value){
  self[index] = value;
}
SWIGINTERN unsigned int *uintArray_cast(uintArray *self){
  return self;
}
SWIGINTERN uintArray *uintArray_frompointer(unsigned int *t){
  return (uintArray *) t;
}

typedef FANN::activation_function_enum activationFunctionEnumArray;

SWIGINTERN activationFunctionEnumArray *new_activationFunctionEnumArray(int nelements){
  return new activation_function_enum[nelements]();
}
SWIGINTERN void delete_activationFunctionEnumArray(activationFunctionEnumArray *self){
  delete [] self;
}
SWIGINTERN FANN::activation_function_enum activationFunctionEnumArray_getitem(activationFunctionEnumArray *self,int index){
  return self[index];
}
SWIGINTERN void activationFunctionEnumArray_setitem(activationFunctionEnumArray *self,int index,FANN::activation_function_enum value){
  self[index] = value;
}
SWIGINTERN FANN::activation_function_enum *activationFunctionEnumArray_cast(activationFunctionEnumArray *self){
  return self;
}
SWIGINTERN activationFunctionEnumArray *activationFunctionEnumArray_frompointer(FANN::activation_function_enum *t){
  return (activationFunctionEnumArray *) t;
}

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_FANN_TRAIN_NAMES_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)FANN_TRAIN_NAMES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FANN_ACTIVATIONFUNC_NAMES_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)FANN_ACTIVATIONFUNC_NAMES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FANN_ERRORFUNC_NAMES_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)FANN_ERRORFUNC_NAMES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FANN_STOPFUNC_NAMES_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)FANN_STOPFUNC_NAMES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FANN_NETTYPE_NAMES_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)FANN_NETTYPE_NAMES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_neuron_first_con_set(void * jarg1, unsigned int jarg2) {
  fann_neuron *arg1 = (fann_neuron *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann_neuron *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->first_con = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_neuron_first_con_get(void * jarg1) {
  unsigned int jresult ;
  fann_neuron *arg1 = (fann_neuron *) 0 ;
  unsigned int result;
  
  arg1 = (fann_neuron *)jarg1; 
  result = (unsigned int) ((arg1)->first_con);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_neuron_last_con_set(void * jarg1, unsigned int jarg2) {
  fann_neuron *arg1 = (fann_neuron *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann_neuron *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->last_con = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_neuron_last_con_get(void * jarg1) {
  unsigned int jresult ;
  fann_neuron *arg1 = (fann_neuron *) 0 ;
  unsigned int result;
  
  arg1 = (fann_neuron *)jarg1; 
  result = (unsigned int) ((arg1)->last_con);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_neuron_sum_set(void * jarg1, float jarg2) {
  fann_neuron *arg1 = (fann_neuron *) 0 ;
  fann_type arg2 ;
  
  arg1 = (fann_neuron *)jarg1; 
  arg2 = (fann_type)jarg2; 
  if (arg1) (arg1)->sum = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_neuron_sum_get(void * jarg1) {
  float jresult ;
  fann_neuron *arg1 = (fann_neuron *) 0 ;
  fann_type result;
  
  arg1 = (fann_neuron *)jarg1; 
  result = (fann_type) ((arg1)->sum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_neuron_value_set(void * jarg1, float jarg2) {
  fann_neuron *arg1 = (fann_neuron *) 0 ;
  fann_type arg2 ;
  
  arg1 = (fann_neuron *)jarg1; 
  arg2 = (fann_type)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_neuron_value_get(void * jarg1) {
  float jresult ;
  fann_neuron *arg1 = (fann_neuron *) 0 ;
  fann_type result;
  
  arg1 = (fann_neuron *)jarg1; 
  result = (fann_type) ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_neuron_activation_steepness_set(void * jarg1, float jarg2) {
  fann_neuron *arg1 = (fann_neuron *) 0 ;
  fann_type arg2 ;
  
  arg1 = (fann_neuron *)jarg1; 
  arg2 = (fann_type)jarg2; 
  if (arg1) (arg1)->activation_steepness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_neuron_activation_steepness_get(void * jarg1) {
  float jresult ;
  fann_neuron *arg1 = (fann_neuron *) 0 ;
  fann_type result;
  
  arg1 = (fann_neuron *)jarg1; 
  result = (fann_type) ((arg1)->activation_steepness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_neuron_activation_function_set(void * jarg1, int jarg2) {
  fann_neuron *arg1 = (fann_neuron *) 0 ;
  enum fann_activationfunc_enum arg2 ;
  
  arg1 = (fann_neuron *)jarg1; 
  arg2 = (enum fann_activationfunc_enum)jarg2; 
  if (arg1) (arg1)->activation_function = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_fann_neuron_activation_function_get(void * jarg1) {
  int jresult ;
  fann_neuron *arg1 = (fann_neuron *) 0 ;
  enum fann_activationfunc_enum result;
  
  arg1 = (fann_neuron *)jarg1; 
  result = (enum fann_activationfunc_enum) ((arg1)->activation_function);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_fann_neuron() {
  void * jresult ;
  fann_neuron *result = 0 ;
  
  result = (fann_neuron *)new fann_neuron();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_fann_neuron(void * jarg1) {
  fann_neuron *arg1 = (fann_neuron *) 0 ;
  
  arg1 = (fann_neuron *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_layer_first_neuron_set(void * jarg1, void * jarg2) {
  fann_layer *arg1 = (fann_layer *) 0 ;
  fann_neuron *arg2 = (fann_neuron *) 0 ;
  
  arg1 = (fann_layer *)jarg1; 
  arg2 = (fann_neuron *)jarg2; 
  if (arg1) (arg1)->first_neuron = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_layer_first_neuron_get(void * jarg1) {
  void * jresult ;
  fann_layer *arg1 = (fann_layer *) 0 ;
  fann_neuron *result = 0 ;
  
  arg1 = (fann_layer *)jarg1; 
  result = (fann_neuron *) ((arg1)->first_neuron);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_layer_last_neuron_set(void * jarg1, void * jarg2) {
  fann_layer *arg1 = (fann_layer *) 0 ;
  fann_neuron *arg2 = (fann_neuron *) 0 ;
  
  arg1 = (fann_layer *)jarg1; 
  arg2 = (fann_neuron *)jarg2; 
  if (arg1) (arg1)->last_neuron = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_layer_last_neuron_get(void * jarg1) {
  void * jresult ;
  fann_layer *arg1 = (fann_layer *) 0 ;
  fann_neuron *result = 0 ;
  
  arg1 = (fann_layer *)jarg1; 
  result = (fann_neuron *) ((arg1)->last_neuron);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_fann_layer() {
  void * jresult ;
  fann_layer *result = 0 ;
  
  result = (fann_layer *)new fann_layer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_fann_layer(void * jarg1) {
  fann_layer *arg1 = (fann_layer *) 0 ;
  
  arg1 = (fann_layer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_error_errno_f_set(void * jarg1, int jarg2) {
  struct fann_error *arg1 = (struct fann_error *) 0 ;
  enum fann_errno_enum arg2 ;
  
  arg1 = (struct fann_error *)jarg1; 
  arg2 = (enum fann_errno_enum)jarg2; 
  if (arg1) (arg1)->errno_f = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_fann_error_errno_f_get(void * jarg1) {
  int jresult ;
  struct fann_error *arg1 = (struct fann_error *) 0 ;
  enum fann_errno_enum result;
  
  arg1 = (struct fann_error *)jarg1; 
  result = (enum fann_errno_enum) ((arg1)->errno_f);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_error_error_log_set(void * jarg1, void * jarg2) {
  struct fann_error *arg1 = (struct fann_error *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  arg1 = (struct fann_error *)jarg1; 
  arg2 = (FILE *)jarg2; 
  if (arg1) (arg1)->error_log = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_error_error_log_get(void * jarg1) {
  void * jresult ;
  struct fann_error *arg1 = (struct fann_error *) 0 ;
  FILE *result = 0 ;
  
  arg1 = (struct fann_error *)jarg1; 
  result = (FILE *) ((arg1)->error_log);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_error_errstr_set(void * jarg1, char * jarg2) {
  struct fann_error *arg1 = (struct fann_error *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (struct fann_error *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->errstr;
    if (arg2) {
      arg1->errstr = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->errstr, (const char *)arg2);
    } else {
      arg1->errstr = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_fann_error_errstr_get(void * jarg1) {
  char * jresult ;
  struct fann_error *arg1 = (struct fann_error *) 0 ;
  char *result = 0 ;
  
  arg1 = (struct fann_error *)jarg1; 
  result = (char *) ((arg1)->errstr);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_fann_error() {
  void * jresult ;
  struct fann_error *result = 0 ;
  
  result = (struct fann_error *)new struct fann_error();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_fann_error(void * jarg1) {
  struct fann_error *arg1 = (struct fann_error *) 0 ;
  
  arg1 = (struct fann_error *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_errno_f_set(void * jarg1, int jarg2) {
  fann *arg1 = (fann *) 0 ;
  enum fann_errno_enum arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (enum fann_errno_enum)jarg2; 
  if (arg1) (arg1)->errno_f = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_fann_errno_f_get(void * jarg1) {
  int jresult ;
  fann *arg1 = (fann *) 0 ;
  enum fann_errno_enum result;
  
  arg1 = (fann *)jarg1; 
  result = (enum fann_errno_enum) ((arg1)->errno_f);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_error_log_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (FILE *)jarg2; 
  if (arg1) (arg1)->error_log = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_error_log_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  FILE *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (FILE *) ((arg1)->error_log);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_errstr_set(void * jarg1, char * jarg2) {
  fann *arg1 = (fann *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->errstr;
    if (arg2) {
      arg1->errstr = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->errstr, (const char *)arg2);
    } else {
      arg1->errstr = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_fann_errstr_get(void * jarg1) {
  char * jresult ;
  fann *arg1 = (fann *) 0 ;
  char *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (char *) ((arg1)->errstr);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_learning_rate_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  float arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->learning_rate = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_learning_rate_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  float result;
  
  arg1 = (fann *)jarg1; 
  result = (float) ((arg1)->learning_rate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_learning_momentum_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  float arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->learning_momentum = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_learning_momentum_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  float result;
  
  arg1 = (fann *)jarg1; 
  result = (float) ((arg1)->learning_momentum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_connection_rate_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  float arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->connection_rate = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_connection_rate_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  float result;
  
  arg1 = (fann *)jarg1; 
  result = (float) ((arg1)->connection_rate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_network_type_set(void * jarg1, int jarg2) {
  fann *arg1 = (fann *) 0 ;
  enum fann_nettype_enum arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (enum fann_nettype_enum)jarg2; 
  if (arg1) (arg1)->network_type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_fann_network_type_get(void * jarg1) {
  int jresult ;
  fann *arg1 = (fann *) 0 ;
  enum fann_nettype_enum result;
  
  arg1 = (fann *)jarg1; 
  result = (enum fann_nettype_enum) ((arg1)->network_type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_first_layer_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  fann_layer *arg2 = (fann_layer *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (fann_layer *)jarg2; 
  if (arg1) (arg1)->first_layer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_first_layer_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  fann_layer *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (fann_layer *) ((arg1)->first_layer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_last_layer_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  fann_layer *arg2 = (fann_layer *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (fann_layer *)jarg2; 
  if (arg1) (arg1)->last_layer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_last_layer_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  fann_layer *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (fann_layer *) ((arg1)->last_layer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_total_neurons_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->total_neurons = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_total_neurons_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->total_neurons);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_num_input_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->num_input = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_num_input_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->num_input);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_num_output_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->num_output = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_num_output_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->num_output);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_weights_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (fann_type *)jarg2; 
  if (arg1) (arg1)->weights = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_weights_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  fann_type *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (fann_type *) ((arg1)->weights);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_connections_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  fann_neuron **arg2 = (fann_neuron **) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (fann_neuron **)jarg2; 
  if (arg1) (arg1)->connections = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_connections_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  fann_neuron **result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (fann_neuron **) ((arg1)->connections);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_train_errors_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (fann_type *)jarg2; 
  if (arg1) (arg1)->train_errors = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_train_errors_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  fann_type *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (fann_type *) ((arg1)->train_errors);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_training_algorithm_set(void * jarg1, int jarg2) {
  fann *arg1 = (fann *) 0 ;
  enum fann_train_enum arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (enum fann_train_enum)jarg2; 
  if (arg1) (arg1)->training_algorithm = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_fann_training_algorithm_get(void * jarg1) {
  int jresult ;
  fann *arg1 = (fann *) 0 ;
  enum fann_train_enum result;
  
  arg1 = (fann *)jarg1; 
  result = (enum fann_train_enum) ((arg1)->training_algorithm);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_total_connections_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->total_connections = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_total_connections_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->total_connections);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_output_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (fann_type *)jarg2; 
  if (arg1) (arg1)->output = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_output_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  fann_type *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (fann_type *) ((arg1)->output);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_num_MSE_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->num_MSE = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_num_MSE_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->num_MSE);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_MSE_value_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  float arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MSE_value = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_MSE_value_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  float result;
  
  arg1 = (fann *)jarg1; 
  result = (float) ((arg1)->MSE_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_num_bit_fail_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->num_bit_fail = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_num_bit_fail_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->num_bit_fail);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_bit_fail_limit_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  fann_type arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (fann_type)jarg2; 
  if (arg1) (arg1)->bit_fail_limit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_bit_fail_limit_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  fann_type result;
  
  arg1 = (fann *)jarg1; 
  result = (fann_type) ((arg1)->bit_fail_limit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_train_error_function_set(void * jarg1, int jarg2) {
  fann *arg1 = (fann *) 0 ;
  enum fann_errorfunc_enum arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (enum fann_errorfunc_enum)jarg2; 
  if (arg1) (arg1)->train_error_function = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_fann_train_error_function_get(void * jarg1) {
  int jresult ;
  fann *arg1 = (fann *) 0 ;
  enum fann_errorfunc_enum result;
  
  arg1 = (fann *)jarg1; 
  result = (enum fann_errorfunc_enum) ((arg1)->train_error_function);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_train_stop_function_set(void * jarg1, int jarg2) {
  fann *arg1 = (fann *) 0 ;
  enum fann_stopfunc_enum arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (enum fann_stopfunc_enum)jarg2; 
  if (arg1) (arg1)->train_stop_function = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_fann_train_stop_function_get(void * jarg1) {
  int jresult ;
  fann *arg1 = (fann *) 0 ;
  enum fann_stopfunc_enum result;
  
  arg1 = (fann *)jarg1; 
  result = (enum fann_stopfunc_enum) ((arg1)->train_stop_function);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_callback_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  fann_callback_type arg2 = (fann_callback_type) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (fann_callback_type)jarg2; 
  if (arg1) (arg1)->callback = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_callback_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  fann_callback_type result;
  
  arg1 = (fann *)jarg1; 
  result = (fann_callback_type) ((arg1)->callback);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_user_data_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->user_data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_user_data_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  void *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (void *) ((arg1)->user_data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_cascade_output_change_fraction_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  float arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->cascade_output_change_fraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_cascade_output_change_fraction_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  float result;
  
  arg1 = (fann *)jarg1; 
  result = (float) ((arg1)->cascade_output_change_fraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_cascade_output_stagnation_epochs_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->cascade_output_stagnation_epochs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_cascade_output_stagnation_epochs_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->cascade_output_stagnation_epochs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_cascade_candidate_change_fraction_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  float arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->cascade_candidate_change_fraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_cascade_candidate_change_fraction_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  float result;
  
  arg1 = (fann *)jarg1; 
  result = (float) ((arg1)->cascade_candidate_change_fraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_cascade_candidate_stagnation_epochs_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->cascade_candidate_stagnation_epochs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_cascade_candidate_stagnation_epochs_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->cascade_candidate_stagnation_epochs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_cascade_best_candidate_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->cascade_best_candidate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_cascade_best_candidate_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->cascade_best_candidate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_cascade_candidate_limit_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  fann_type arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (fann_type)jarg2; 
  if (arg1) (arg1)->cascade_candidate_limit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_cascade_candidate_limit_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  fann_type result;
  
  arg1 = (fann *)jarg1; 
  result = (fann_type) ((arg1)->cascade_candidate_limit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_cascade_weight_multiplier_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  fann_type arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (fann_type)jarg2; 
  if (arg1) (arg1)->cascade_weight_multiplier = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_cascade_weight_multiplier_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  fann_type result;
  
  arg1 = (fann *)jarg1; 
  result = (fann_type) ((arg1)->cascade_weight_multiplier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_cascade_max_out_epochs_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->cascade_max_out_epochs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_cascade_max_out_epochs_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->cascade_max_out_epochs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_cascade_max_cand_epochs_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->cascade_max_cand_epochs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_cascade_max_cand_epochs_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->cascade_max_cand_epochs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_cascade_min_out_epochs_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->cascade_min_out_epochs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_cascade_min_out_epochs_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->cascade_min_out_epochs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_cascade_min_cand_epochs_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->cascade_min_cand_epochs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_cascade_min_cand_epochs_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->cascade_min_cand_epochs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_cascade_activation_functions_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  enum fann_activationfunc_enum *arg2 = (enum fann_activationfunc_enum *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (enum fann_activationfunc_enum *)jarg2; 
  if (arg1) (arg1)->cascade_activation_functions = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_cascade_activation_functions_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  enum fann_activationfunc_enum *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (enum fann_activationfunc_enum *) ((arg1)->cascade_activation_functions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_cascade_activation_functions_count_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->cascade_activation_functions_count = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_cascade_activation_functions_count_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->cascade_activation_functions_count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_cascade_activation_steepnesses_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (fann_type *)jarg2; 
  if (arg1) (arg1)->cascade_activation_steepnesses = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_cascade_activation_steepnesses_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  fann_type *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (fann_type *) ((arg1)->cascade_activation_steepnesses);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_cascade_activation_steepnesses_count_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->cascade_activation_steepnesses_count = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_cascade_activation_steepnesses_count_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->cascade_activation_steepnesses_count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_cascade_num_candidate_groups_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->cascade_num_candidate_groups = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_cascade_num_candidate_groups_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->cascade_num_candidate_groups);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_cascade_candidate_scores_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (fann_type *)jarg2; 
  if (arg1) (arg1)->cascade_candidate_scores = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_cascade_candidate_scores_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  fann_type *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (fann_type *) ((arg1)->cascade_candidate_scores);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_total_neurons_allocated_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->total_neurons_allocated = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_total_neurons_allocated_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->total_neurons_allocated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_total_connections_allocated_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->total_connections_allocated = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_total_connections_allocated_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->total_connections_allocated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_quickprop_decay_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  float arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->quickprop_decay = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_quickprop_decay_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  float result;
  
  arg1 = (fann *)jarg1; 
  result = (float) ((arg1)->quickprop_decay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_quickprop_mu_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  float arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->quickprop_mu = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_quickprop_mu_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  float result;
  
  arg1 = (fann *)jarg1; 
  result = (float) ((arg1)->quickprop_mu);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_rprop_increase_factor_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  float arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rprop_increase_factor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_rprop_increase_factor_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  float result;
  
  arg1 = (fann *)jarg1; 
  result = (float) ((arg1)->rprop_increase_factor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_rprop_decrease_factor_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  float arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rprop_decrease_factor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_rprop_decrease_factor_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  float result;
  
  arg1 = (fann *)jarg1; 
  result = (float) ((arg1)->rprop_decrease_factor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_rprop_delta_min_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  float arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rprop_delta_min = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_rprop_delta_min_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  float result;
  
  arg1 = (fann *)jarg1; 
  result = (float) ((arg1)->rprop_delta_min);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_rprop_delta_max_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  float arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rprop_delta_max = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_rprop_delta_max_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  float result;
  
  arg1 = (fann *)jarg1; 
  result = (float) ((arg1)->rprop_delta_max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_rprop_delta_zero_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  float arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rprop_delta_zero = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_rprop_delta_zero_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  float result;
  
  arg1 = (fann *)jarg1; 
  result = (float) ((arg1)->rprop_delta_zero);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_sarprop_weight_decay_shift_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  float arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->sarprop_weight_decay_shift = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_sarprop_weight_decay_shift_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  float result;
  
  arg1 = (fann *)jarg1; 
  result = (float) ((arg1)->sarprop_weight_decay_shift);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_sarprop_step_error_threshold_factor_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  float arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->sarprop_step_error_threshold_factor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_sarprop_step_error_threshold_factor_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  float result;
  
  arg1 = (fann *)jarg1; 
  result = (float) ((arg1)->sarprop_step_error_threshold_factor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_sarprop_step_error_shift_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  float arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->sarprop_step_error_shift = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_sarprop_step_error_shift_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  float result;
  
  arg1 = (fann *)jarg1; 
  result = (float) ((arg1)->sarprop_step_error_shift);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_sarprop_temperature_set(void * jarg1, float jarg2) {
  fann *arg1 = (fann *) 0 ;
  float arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->sarprop_temperature = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_sarprop_temperature_get(void * jarg1) {
  float jresult ;
  fann *arg1 = (fann *) 0 ;
  float result;
  
  arg1 = (fann *)jarg1; 
  result = (float) ((arg1)->sarprop_temperature);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_sarprop_epoch_set(void * jarg1, unsigned int jarg2) {
  fann *arg1 = (fann *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->sarprop_epoch = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_sarprop_epoch_get(void * jarg1) {
  unsigned int jresult ;
  fann *arg1 = (fann *) 0 ;
  unsigned int result;
  
  arg1 = (fann *)jarg1; 
  result = (unsigned int) ((arg1)->sarprop_epoch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_train_slopes_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (fann_type *)jarg2; 
  if (arg1) (arg1)->train_slopes = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_train_slopes_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  fann_type *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (fann_type *) ((arg1)->train_slopes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_prev_steps_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (fann_type *)jarg2; 
  if (arg1) (arg1)->prev_steps = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_prev_steps_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  fann_type *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (fann_type *) ((arg1)->prev_steps);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_prev_train_slopes_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (fann_type *)jarg2; 
  if (arg1) (arg1)->prev_train_slopes = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_prev_train_slopes_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  fann_type *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (fann_type *) ((arg1)->prev_train_slopes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_prev_weights_deltas_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (fann_type *)jarg2; 
  if (arg1) (arg1)->prev_weights_deltas = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_prev_weights_deltas_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  fann_type *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (fann_type *) ((arg1)->prev_weights_deltas);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_scale_mean_in_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->scale_mean_in = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_scale_mean_in_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  float *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (float *) ((arg1)->scale_mean_in);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_scale_deviation_in_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->scale_deviation_in = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_scale_deviation_in_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  float *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (float *) ((arg1)->scale_deviation_in);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_scale_new_min_in_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->scale_new_min_in = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_scale_new_min_in_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  float *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (float *) ((arg1)->scale_new_min_in);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_scale_factor_in_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->scale_factor_in = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_scale_factor_in_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  float *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (float *) ((arg1)->scale_factor_in);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_scale_mean_out_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->scale_mean_out = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_scale_mean_out_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  float *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (float *) ((arg1)->scale_mean_out);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_scale_deviation_out_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->scale_deviation_out = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_scale_deviation_out_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  float *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (float *) ((arg1)->scale_deviation_out);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_scale_new_min_out_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->scale_new_min_out = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_scale_new_min_out_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  float *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (float *) ((arg1)->scale_new_min_out);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_scale_factor_out_set(void * jarg1, void * jarg2) {
  fann *arg1 = (fann *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (fann *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->scale_factor_out = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fann_scale_factor_out_get(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  float *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (float *) ((arg1)->scale_factor_out);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_fann() {
  void * jresult ;
  fann *result = 0 ;
  
  result = (fann *)new fann();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_fann(void * jarg1) {
  fann *arg1 = (fann *) 0 ;
  
  arg1 = (fann *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_connection_from_neuron_set(void * jarg1, unsigned int jarg2) {
  fann_connection *arg1 = (fann_connection *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann_connection *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->from_neuron = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_connection_from_neuron_get(void * jarg1) {
  unsigned int jresult ;
  fann_connection *arg1 = (fann_connection *) 0 ;
  unsigned int result;
  
  arg1 = (fann_connection *)jarg1; 
  result = (unsigned int) ((arg1)->from_neuron);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_connection_to_neuron_set(void * jarg1, unsigned int jarg2) {
  fann_connection *arg1 = (fann_connection *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann_connection *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->to_neuron = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_fann_connection_to_neuron_get(void * jarg1) {
  unsigned int jresult ;
  fann_connection *arg1 = (fann_connection *) 0 ;
  unsigned int result;
  
  arg1 = (fann_connection *)jarg1; 
  result = (unsigned int) ((arg1)->to_neuron);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_fann_connection_weight_set(void * jarg1, float jarg2) {
  fann_connection *arg1 = (fann_connection *) 0 ;
  fann_type arg2 ;
  
  arg1 = (fann_connection *)jarg1; 
  arg2 = (fann_type)jarg2; 
  if (arg1) (arg1)->weight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_fann_connection_weight_get(void * jarg1) {
  float jresult ;
  fann_connection *arg1 = (fann_connection *) 0 ;
  fann_type result;
  
  arg1 = (fann_connection *)jarg1; 
  result = (fann_type) ((arg1)->weight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_fann_connection() {
  void * jresult ;
  fann_connection *result = 0 ;
  
  result = (fann_connection *)new fann_connection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_fann_connection(void * jarg1) {
  fann_connection *arg1 = (fann_connection *) 0 ;
  
  arg1 = (fann_connection *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_connectionArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  connectionArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (connectionArray *)new_connectionArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_connectionArray(void * jarg1) {
  connectionArray *arg1 = (connectionArray *) 0 ;
  
  arg1 = (connectionArray *)jarg1; 
  delete_connectionArray(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_connectionArray_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  connectionArray *arg1 = (connectionArray *) 0 ;
  int arg2 ;
  FANN::connection result;
  
  arg1 = (connectionArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = connectionArray_getitem(arg1,arg2);
  jresult = new FANN::connection((const FANN::connection &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_connectionArray_setitem(void * jarg1, int jarg2, void * jarg3) {
  connectionArray *arg1 = (connectionArray *) 0 ;
  int arg2 ;
  FANN::connection arg3 ;
  FANN::connection *argp3 ;
  
  arg1 = (connectionArray *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (FANN::connection *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null FANN::connection", 0);
    return ;
  }
  arg3 = *argp3; 
  connectionArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_connectionArray_cast(void * jarg1) {
  void * jresult ;
  connectionArray *arg1 = (connectionArray *) 0 ;
  FANN::connection *result = 0 ;
  
  arg1 = (connectionArray *)jarg1; 
  result = (FANN::connection *)connectionArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_connectionArray_frompointer(void * jarg1) {
  void * jresult ;
  FANN::connection *arg1 = (FANN::connection *) 0 ;
  connectionArray *result = 0 ;
  
  arg1 = (FANN::connection *)jarg1; 
  result = (connectionArray *)connectionArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_training_data__SWIG_0() {
  void * jresult ;
  FANN::training_data *result = 0 ;
  
  result = (FANN::training_data *)new FANN::training_data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_training_data__SWIG_1(void * jarg1) {
  void * jresult ;
  FANN::training_data *arg1 = 0 ;
  FANN::training_data *result = 0 ;
  
  arg1 = (FANN::training_data *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::training_data const & type is null", 0);
    return 0;
  } 
  result = (FANN::training_data *)new FANN::training_data((FANN::training_data const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_training_data(void * jarg1) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_destroy_train(void * jarg1) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  (arg1)->destroy_train();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_training_data_read_train_from_file(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (FANN::training_data *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->read_train_from_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_training_data_save_train(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (FANN::training_data *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->save_train((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_training_data_save_train_to_fixed(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  bool result;
  
  arg1 = (FANN::training_data *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->save_train_to_fixed((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_shuffle_train_data(void * jarg1) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  (arg1)->shuffle_train_data();
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_merge_train_data(void * jarg1, void * jarg2) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  FANN::training_data *arg2 = 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (FANN::training_data *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::training_data const & type is null", 0);
    return ;
  } 
  (arg1)->merge_train_data((FANN::training_data const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_training_data_length_train_data(void * jarg1) {
  unsigned int jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::training_data *)jarg1; 
  result = (unsigned int)(arg1)->length_train_data();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_training_data_num_input_train_data(void * jarg1) {
  unsigned int jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::training_data *)jarg1; 
  result = (unsigned int)(arg1)->num_input_train_data();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_training_data_num_output_train_data(void * jarg1) {
  unsigned int jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::training_data *)jarg1; 
  result = (unsigned int)(arg1)->num_output_train_data();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_training_data_get_input(void * jarg1) {
  void * jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  fann_type **result = 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  result = (fann_type **)(arg1)->get_input();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_training_data_get_output(void * jarg1) {
  void * jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  fann_type **result = 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  result = (fann_type **)(arg1)->get_output();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_training_data_get_train_input(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int arg2 ;
  fann_type *result = 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (fann_type *)(arg1)->get_train_input(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_training_data_get_train_output(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int arg2 ;
  fann_type *result = 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (fann_type *)(arg1)->get_train_output(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_set_train_data__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, void * jarg6) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  fann_type **arg4 = (fann_type **) 0 ;
  unsigned int arg5 ;
  fann_type **arg6 = (fann_type **) 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (fann_type **)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (fann_type **)jarg6; 
  (arg1)->set_train_data(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_set_train_data__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, void * jarg6) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  fann_type *arg4 = (fann_type *) 0 ;
  unsigned int arg5 ;
  fann_type *arg6 = (fann_type *) 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (fann_type *)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (fann_type *)jarg6; 
  (arg1)->set_train_data(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_create_train_from_callback(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  void (__stdcall *arg5)(unsigned int,unsigned int,unsigned int,fann_type *,fann_type *) = (void (__stdcall *)(unsigned int,unsigned int,unsigned int,fann_type *,fann_type *)) 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (void (__stdcall *)(unsigned int,unsigned int,unsigned int,fann_type *,fann_type *))jarg5; 
  (arg1)->create_train_from_callback(arg2,arg3,arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_training_data_get_min_input(void * jarg1) {
  float jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  fann_type result;
  
  arg1 = (FANN::training_data *)jarg1; 
  result = (fann_type)(arg1)->get_min_input();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_training_data_get_max_input(void * jarg1) {
  float jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  fann_type result;
  
  arg1 = (FANN::training_data *)jarg1; 
  result = (fann_type)(arg1)->get_max_input();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_training_data_get_min_output(void * jarg1) {
  float jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  fann_type result;
  
  arg1 = (FANN::training_data *)jarg1; 
  result = (fann_type)(arg1)->get_min_output();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_training_data_get_max_output(void * jarg1) {
  float jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  fann_type result;
  
  arg1 = (FANN::training_data *)jarg1; 
  result = (fann_type)(arg1)->get_max_output();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_scale_input_train_data(void * jarg1, float jarg2, float jarg3) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  fann_type arg2 ;
  fann_type arg3 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (fann_type)jarg2; 
  arg3 = (fann_type)jarg3; 
  (arg1)->scale_input_train_data(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_scale_output_train_data(void * jarg1, float jarg2, float jarg3) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  fann_type arg2 ;
  fann_type arg3 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (fann_type)jarg2; 
  arg3 = (fann_type)jarg3; 
  (arg1)->scale_output_train_data(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_scale_train_data(void * jarg1, float jarg2, float jarg3) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  fann_type arg2 ;
  fann_type arg3 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (fann_type)jarg2; 
  arg3 = (fann_type)jarg3; 
  (arg1)->scale_train_data(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_subset_train_data(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->subset_train_data(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_neural_net__SWIG_0() {
  void * jresult ;
  FANN::neural_net *result = 0 ;
  
  result = (FANN::neural_net *)new FANN::neural_net();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_neural_net__SWIG_1(void * jarg1) {
  void * jresult ;
  FANN::neural_net *arg1 = 0 ;
  FANN::neural_net *result = 0 ;
  
  arg1 = (FANN::neural_net *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::neural_net const & type is null", 0);
    return 0;
  } 
  result = (FANN::neural_net *)new FANN::neural_net((FANN::neural_net const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_neural_net__SWIG_2(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  FANN::neural_net *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (FANN::neural_net *)new FANN::neural_net(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_copy_from_struct_fann(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann *arg2 = (fann *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann *)jarg2; 
  (arg1)->copy_from_struct_fann(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_neural_net(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_destroy(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->destroy();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_create_standard(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int arg2 ;
  void *arg3 = 0 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->create_standard(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_create_standard_array(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  result = (bool)(arg1)->create_standard_array(arg2,(unsigned int const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_create_sparse(void * jarg1, float jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  unsigned int arg3 ;
  void *arg4 = 0 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->create_sparse(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_create_sparse_array(void * jarg1, float jarg2, unsigned int jarg3, void * jarg4) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  unsigned int arg3 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int *)jarg4; 
  result = (bool)(arg1)->create_sparse_array(arg2,arg3,(unsigned int const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_create_shortcut(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int arg2 ;
  void *arg3 = 0 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->create_shortcut(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_create_shortcut_array(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  result = (bool)(arg1)->create_shortcut_array(arg2,(unsigned int const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_neural_net_run(void * jarg1, void * jarg2) {
  void * jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  fann_type *result = 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type *)jarg2; 
  result = (fann_type *)(arg1)->run(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_randomize_weights(void * jarg1, float jarg2, float jarg3) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type arg2 ;
  fann_type arg3 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type)jarg2; 
  arg3 = (fann_type)jarg3; 
  (arg1)->randomize_weights(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_init_weights(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::training_data *arg2 = 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::training_data *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::training_data const & type is null", 0);
    return ;
  } 
  (arg1)->init_weights((FANN::training_data const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_print_connections(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->print_connections();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_create_from_file(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->create_from_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_save(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->save((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_neural_net_save_to_fixed(void * jarg1, char * jarg2) {
  int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)(arg1)->save_to_fixed((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_train(void * jarg1, void * jarg2, void * jarg3) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  fann_type *arg3 = (fann_type *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type *)jarg2; 
  arg3 = (fann_type *)jarg3; 
  (arg1)->train(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_train_epoch(void * jarg1, void * jarg2) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::training_data *arg2 = 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::training_data *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::training_data const & type is null", 0);
    return 0;
  } 
  result = (float)(arg1)->train_epoch((FANN::training_data const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_train_on_data(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, float jarg5) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::training_data *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  float arg5 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::training_data *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::training_data const & type is null", 0);
    return ;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->train_on_data((FANN::training_data const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_train_on_file(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, float jarg5) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  float arg5 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->train_on_file((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_neural_net_test(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  fann_type *arg3 = (fann_type *) 0 ;
  fann_type *result = 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type *)jarg2; 
  arg3 = (fann_type *)jarg3; 
  result = (fann_type *)(arg1)->test(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_test_data(void * jarg1, void * jarg2) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::training_data *arg2 = 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::training_data *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::training_data const & type is null", 0);
    return 0;
  } 
  result = (float)(arg1)->test_data((FANN::training_data const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_MSE(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_MSE();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_reset_MSE(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->reset_MSE();
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_callback(void * jarg1, void * jarg2, void * jarg3) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::callback_type arg2 ;
  void *arg3 = (void *) 0 ;
  FANN::callback_type *argp2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  argp2 = (FANN::callback_type *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null callback_type", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (void *)jarg3; 
  (arg1)->set_callback(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_print_parameters(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->print_parameters();
}


SWIGEXPORT int SWIGSTDCALL CSharp_neural_net_get_training_algorithm(void * jarg1) {
  int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::training_algorithm_enum result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (training_algorithm_enum)(arg1)->get_training_algorithm();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_training_algorithm(void * jarg1, int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::training_algorithm_enum arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (training_algorithm_enum)jarg2; 
  (arg1)->set_training_algorithm(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_learning_rate(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_learning_rate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_learning_rate(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_learning_rate(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_neural_net_get_activation_function(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  int arg2 ;
  int arg3 ;
  FANN::activation_function_enum result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (activation_function_enum)(arg1)->get_activation_function(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_activation_function(void * jarg1, int jarg2, int jarg3, int jarg4) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::activation_function_enum arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (activation_function_enum)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->set_activation_function(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_activation_function_layer(void * jarg1, int jarg2, int jarg3) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::activation_function_enum arg2 ;
  int arg3 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (activation_function_enum)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set_activation_function_layer(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_activation_function_hidden(void * jarg1, int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::activation_function_enum arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (activation_function_enum)jarg2; 
  (arg1)->set_activation_function_hidden(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_activation_function_output(void * jarg1, int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::activation_function_enum arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (activation_function_enum)jarg2; 
  (arg1)->set_activation_function_output(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_activation_steepness(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  int arg2 ;
  int arg3 ;
  fann_type result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (fann_type)(arg1)->get_activation_steepness(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_activation_steepness(void * jarg1, float jarg2, int jarg3, int jarg4) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->set_activation_steepness(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_activation_steepness_layer(void * jarg1, float jarg2, int jarg3) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type arg2 ;
  int arg3 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set_activation_steepness_layer(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_activation_steepness_hidden(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type)jarg2; 
  (arg1)->set_activation_steepness_hidden(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_activation_steepness_output(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type)jarg2; 
  (arg1)->set_activation_steepness_output(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_neural_net_get_train_error_function(void * jarg1) {
  int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::error_function_enum result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (error_function_enum)(arg1)->get_train_error_function();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_train_error_function(void * jarg1, int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::error_function_enum arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (error_function_enum)jarg2; 
  (arg1)->set_train_error_function(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_quickprop_decay(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_quickprop_decay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_quickprop_decay(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_quickprop_decay(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_quickprop_mu(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_quickprop_mu();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_quickprop_mu(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_quickprop_mu(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_rprop_increase_factor(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_rprop_increase_factor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_rprop_increase_factor(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_rprop_increase_factor(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_rprop_decrease_factor(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_rprop_decrease_factor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_rprop_decrease_factor(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_rprop_decrease_factor(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_rprop_delta_zero(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_rprop_delta_zero();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_rprop_delta_zero(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_rprop_delta_zero(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_rprop_delta_min(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_rprop_delta_min();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_rprop_delta_min(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_rprop_delta_min(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_rprop_delta_max(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_rprop_delta_max();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_rprop_delta_max(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_rprop_delta_max(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_sarprop_weight_decay_shift(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_sarprop_weight_decay_shift();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_sarprop_weight_decay_shift(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_sarprop_weight_decay_shift(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_sarprop_step_error_threshold_factor(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_sarprop_step_error_threshold_factor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_sarprop_step_error_threshold_factor(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_sarprop_step_error_threshold_factor(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_sarprop_step_error_shift(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_sarprop_step_error_shift();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_sarprop_step_error_shift(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_sarprop_step_error_shift(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_sarprop_temperature(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_sarprop_temperature();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_sarprop_temperature(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_sarprop_temperature(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_num_input(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_num_input();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_num_output(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_num_output();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_total_neurons(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_total_neurons();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_total_connections(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_total_connections();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_neural_net_get_network_type(void * jarg1) {
  int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::network_type_enum result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (network_type_enum)(arg1)->get_network_type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_connection_rate(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_connection_rate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_num_layers(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_num_layers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_get_layer_array(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->get_layer_array(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_get_bias_array(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->get_bias_array(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_get_connection_array(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::connection *arg2 = (FANN::connection *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::connection *)jarg2; 
  (arg1)->get_connection_array(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_weight_array(void * jarg1, void * jarg2, unsigned int jarg3) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::connection *arg2 = (FANN::connection *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::connection *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->set_weight_array(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_weight(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  fann_type arg4 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (fann_type)jarg4; 
  (arg1)->set_weight(arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_learning_momentum(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_learning_momentum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_learning_momentum(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_learning_momentum(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_neural_net_get_train_stop_function(void * jarg1) {
  int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::stop_function_enum result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (stop_function_enum)(arg1)->get_train_stop_function();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_train_stop_function(void * jarg1, int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::stop_function_enum arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (stop_function_enum)jarg2; 
  (arg1)->set_train_stop_function(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_bit_fail_limit(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (fann_type)(arg1)->get_bit_fail_limit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_bit_fail_limit(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type)jarg2; 
  (arg1)->set_bit_fail_limit(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_bit_fail(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_bit_fail();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_cascadetrain_on_data(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, float jarg5) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::training_data *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  float arg5 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::training_data *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::training_data const & type is null", 0);
    return ;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->cascadetrain_on_data((FANN::training_data const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_cascadetrain_on_file(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, float jarg5) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  float arg5 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->cascadetrain_on_file((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_cascade_output_change_fraction(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_cascade_output_change_fraction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_cascade_output_change_fraction(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_cascade_output_change_fraction(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_cascade_output_stagnation_epochs(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_cascade_output_stagnation_epochs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_cascade_output_stagnation_epochs(void * jarg1, unsigned int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_cascade_output_stagnation_epochs(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_cascade_candidate_change_fraction(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_cascade_candidate_change_fraction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_cascade_candidate_change_fraction(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_cascade_candidate_change_fraction(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_cascade_candidate_stagnation_epochs(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_cascade_candidate_stagnation_epochs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_cascade_candidate_stagnation_epochs(void * jarg1, unsigned int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_cascade_candidate_stagnation_epochs(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_cascade_weight_multiplier(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (fann_type)(arg1)->get_cascade_weight_multiplier();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_cascade_weight_multiplier(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type)jarg2; 
  (arg1)->set_cascade_weight_multiplier(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_cascade_candidate_limit(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (fann_type)(arg1)->get_cascade_candidate_limit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_cascade_candidate_limit(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type)jarg2; 
  (arg1)->set_cascade_candidate_limit(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_cascade_max_out_epochs(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_cascade_max_out_epochs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_cascade_max_out_epochs(void * jarg1, unsigned int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_cascade_max_out_epochs(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_cascade_max_cand_epochs(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_cascade_max_cand_epochs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_cascade_max_cand_epochs(void * jarg1, unsigned int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_cascade_max_cand_epochs(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_cascade_num_candidates(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_cascade_num_candidates();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_cascade_activation_functions_count(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_cascade_activation_functions_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_neural_net_get_cascade_activation_functions(void * jarg1) {
  void * jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::activation_function_enum *result = 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (FANN::activation_function_enum *)(arg1)->get_cascade_activation_functions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_cascade_activation_functions(void * jarg1, void * jarg2, unsigned int jarg3) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::activation_function_enum *arg2 = (FANN::activation_function_enum *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::activation_function_enum *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->set_cascade_activation_functions(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_cascade_activation_steepnesses_count(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_cascade_activation_steepnesses_count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_neural_net_get_cascade_activation_steepnesses(void * jarg1) {
  void * jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type *result = 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (fann_type *)(arg1)->get_cascade_activation_steepnesses();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_cascade_activation_steepnesses(void * jarg1, void * jarg2, unsigned int jarg3) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->set_cascade_activation_steepnesses(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_cascade_num_candidate_groups(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_cascade_num_candidate_groups();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_cascade_num_candidate_groups(void * jarg1, unsigned int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_cascade_num_candidate_groups(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_scale_train(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::training_data *arg2 = 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::training_data *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::training_data & type is null", 0);
    return ;
  } 
  (arg1)->scale_train(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_descale_train(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::training_data *arg2 = 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::training_data *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::training_data & type is null", 0);
    return ;
  } 
  (arg1)->descale_train(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_set_input_scaling_params(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::training_data *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::training_data *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::training_data const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->set_input_scaling_params((FANN::training_data const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_set_output_scaling_params(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::training_data *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::training_data *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::training_data const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->set_output_scaling_params((FANN::training_data const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_set_scaling_params(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::training_data *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::training_data *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::training_data const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->set_scaling_params((FANN::training_data const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_clear_scaling_params(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (bool)(arg1)->clear_scaling_params();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_scale_input(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type *)jarg2; 
  (arg1)->scale_input(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_scale_output(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type *)jarg2; 
  (arg1)->scale_output(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_descale_input(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type *)jarg2; 
  (arg1)->descale_input(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_descale_output(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type *)jarg2; 
  (arg1)->descale_output(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_error_log(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FILE *)jarg2; 
  (arg1)->set_error_log(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_errno(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_errno();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_reset_errno(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->reset_errno();
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_reset_errstr(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->reset_errstr();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_neural_net_get_errstr(void * jarg1) {
  char * jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  std::string result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (arg1)->get_errstr();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_print_error(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->print_error();
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_disable_seed_rand(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->disable_seed_rand();
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_enable_seed_rand(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->enable_seed_rand();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fopen(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  FILE *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (FILE *)fopen((char const *)arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_floatArrayArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  floatArrayArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (floatArrayArray *)new_floatArrayArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_floatArrayArray(void * jarg1) {
  floatArrayArray *arg1 = (floatArrayArray *) 0 ;
  
  arg1 = (floatArrayArray *)jarg1; 
  delete_floatArrayArray(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_floatArrayArray_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  floatArrayArray *arg1 = (floatArrayArray *) 0 ;
  int arg2 ;
  float_ptr result;
  
  arg1 = (floatArrayArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float_ptr)floatArrayArray_getitem(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_floatArrayArray_setitem(void * jarg1, int jarg2, void * jarg3) {
  floatArrayArray *arg1 = (floatArrayArray *) 0 ;
  int arg2 ;
  float_ptr arg3 = (float_ptr) 0 ;
  
  arg1 = (floatArrayArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float_ptr)jarg3; 
  floatArrayArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_floatArrayArray_cast(void * jarg1) {
  void * jresult ;
  floatArrayArray *arg1 = (floatArrayArray *) 0 ;
  float_ptr *result = 0 ;
  
  arg1 = (floatArrayArray *)jarg1; 
  result = (float_ptr *)floatArrayArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_floatArrayArray_frompointer(void * jarg1) {
  void * jresult ;
  float_ptr *arg1 = (float_ptr *) 0 ;
  floatArrayArray *result = 0 ;
  
  arg1 = (float_ptr *)jarg1; 
  result = (floatArrayArray *)floatArrayArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_floatArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  floatArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (floatArray *)new_floatArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_floatArray(void * jarg1) {
  floatArray *arg1 = (floatArray *) 0 ;
  
  arg1 = (floatArray *)jarg1; 
  delete_floatArray(arg1);
}


SWIGEXPORT float SWIGSTDCALL CSharp_floatArray_getitem(void * jarg1, int jarg2) {
  float jresult ;
  floatArray *arg1 = (floatArray *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (floatArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)floatArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_floatArray_setitem(void * jarg1, int jarg2, float jarg3) {
  floatArray *arg1 = (floatArray *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (floatArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  floatArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_floatArray_cast(void * jarg1) {
  void * jresult ;
  floatArray *arg1 = (floatArray *) 0 ;
  float *result = 0 ;
  
  arg1 = (floatArray *)jarg1; 
  result = (float *)floatArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_floatArray_frompointer(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  floatArray *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (floatArray *)floatArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_uintArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  uintArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (uintArray *)new_uintArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_uintArray(void * jarg1) {
  uintArray *arg1 = (uintArray *) 0 ;
  
  arg1 = (uintArray *)jarg1; 
  delete_uintArray(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_uintArray_getitem(void * jarg1, int jarg2) {
  unsigned int jresult ;
  uintArray *arg1 = (uintArray *) 0 ;
  int arg2 ;
  unsigned int result;
  
  arg1 = (uintArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned int)uintArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_uintArray_setitem(void * jarg1, int jarg2, unsigned int jarg3) {
  uintArray *arg1 = (uintArray *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (uintArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  uintArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_uintArray_cast(void * jarg1) {
  void * jresult ;
  uintArray *arg1 = (uintArray *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (uintArray *)jarg1; 
  result = (unsigned int *)uintArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_uintArray_frompointer(void * jarg1) {
  void * jresult ;
  unsigned int *arg1 = (unsigned int *) 0 ;
  uintArray *result = 0 ;
  
  arg1 = (unsigned int *)jarg1; 
  result = (uintArray *)uintArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_activationFunctionEnumArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  activationFunctionEnumArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (activationFunctionEnumArray *)new_activationFunctionEnumArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_activationFunctionEnumArray(void * jarg1) {
  activationFunctionEnumArray *arg1 = (activationFunctionEnumArray *) 0 ;
  
  arg1 = (activationFunctionEnumArray *)jarg1; 
  delete_activationFunctionEnumArray(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_activationFunctionEnumArray_getitem(void * jarg1, int jarg2) {
  int jresult ;
  activationFunctionEnumArray *arg1 = (activationFunctionEnumArray *) 0 ;
  int arg2 ;
  FANN::activation_function_enum result;
  
  arg1 = (activationFunctionEnumArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (activation_function_enum)activationFunctionEnumArray_getitem(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_activationFunctionEnumArray_setitem(void * jarg1, int jarg2, int jarg3) {
  activationFunctionEnumArray *arg1 = (activationFunctionEnumArray *) 0 ;
  int arg2 ;
  FANN::activation_function_enum arg3 ;
  
  arg1 = (activationFunctionEnumArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (activation_function_enum)jarg3; 
  activationFunctionEnumArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_activationFunctionEnumArray_cast(void * jarg1) {
  void * jresult ;
  activationFunctionEnumArray *arg1 = (activationFunctionEnumArray *) 0 ;
  FANN::activation_function_enum *result = 0 ;
  
  arg1 = (activationFunctionEnumArray *)jarg1; 
  result = (FANN::activation_function_enum *)activationFunctionEnumArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_activationFunctionEnumArray_frompointer(void * jarg1) {
  void * jresult ;
  FANN::activation_function_enum *arg1 = (FANN::activation_function_enum *) 0 ;
  activationFunctionEnumArray *result = 0 ;
  
  arg1 = (FANN::activation_function_enum *)jarg1; 
  result = (activationFunctionEnumArray *)activationFunctionEnumArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

