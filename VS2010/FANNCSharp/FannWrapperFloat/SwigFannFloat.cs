//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

using FannWrapper;
namespace FannWrapperFloat {

public class SwigFannFloat {
  public static SWIGTYPE_p_p_char FANN_TRAIN_NAMES {
    get {
      global::System.IntPtr cPtr = SwigFannFloatPINVOKE.FANN_TRAIN_NAMES_get();
      SWIGTYPE_p_p_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_p_char FANN_ACTIVATIONFUNC_NAMES {
    get {
      global::System.IntPtr cPtr = SwigFannFloatPINVOKE.FANN_ACTIVATIONFUNC_NAMES_get();
      SWIGTYPE_p_p_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_p_char FANN_ERRORFUNC_NAMES {
    get {
      global::System.IntPtr cPtr = SwigFannFloatPINVOKE.FANN_ERRORFUNC_NAMES_get();
      SWIGTYPE_p_p_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_p_char FANN_STOPFUNC_NAMES {
    get {
      global::System.IntPtr cPtr = SwigFannFloatPINVOKE.FANN_STOPFUNC_NAMES_get();
      SWIGTYPE_p_p_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_p_char FANN_NETTYPE_NAMES {
    get {
      global::System.IntPtr cPtr = SwigFannFloatPINVOKE.FANN_NETTYPE_NAMES_get();
      SWIGTYPE_p_p_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
      return ret;
    } 
  }

  public static void fann_train(fann ann, SWIGTYPE_p_float input, SWIGTYPE_p_float desired_output) {
    SwigFannFloatPINVOKE.fann_train(fann.getCPtr(ann), SWIGTYPE_p_float.getCPtr(input), SWIGTYPE_p_float.getCPtr(desired_output));
  }

  public static SWIGTYPE_p_float fann_test(fann ann, SWIGTYPE_p_float input, SWIGTYPE_p_float desired_output) {
    global::System.IntPtr cPtr = SwigFannFloatPINVOKE.fann_test(fann.getCPtr(ann), SWIGTYPE_p_float.getCPtr(input), SWIGTYPE_p_float.getCPtr(desired_output));
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public static float fann_get_MSE(fann ann) {
    float ret = SwigFannFloatPINVOKE.fann_get_MSE(fann.getCPtr(ann));
    return ret;
  }

  public static uint fann_get_bit_fail(fann ann) {
    uint ret = SwigFannFloatPINVOKE.fann_get_bit_fail(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_reset_MSE(fann ann) {
    SwigFannFloatPINVOKE.fann_reset_MSE(fann.getCPtr(ann));
  }

  public static void fann_train_on_data(fann ann, fann_train_data data, uint max_epochs, uint epochs_between_reports, float desired_error) {
    SwigFannFloatPINVOKE.fann_train_on_data(fann.getCPtr(ann), fann_train_data.getCPtr(data), max_epochs, epochs_between_reports, desired_error);
  }

  public static void fann_train_on_file(fann ann, string filename, uint max_epochs, uint epochs_between_reports, float desired_error) {
    SwigFannFloatPINVOKE.fann_train_on_file(fann.getCPtr(ann), filename, max_epochs, epochs_between_reports, desired_error);
  }

  public static float fann_train_epoch(fann ann, fann_train_data data) {
    float ret = SwigFannFloatPINVOKE.fann_train_epoch(fann.getCPtr(ann), fann_train_data.getCPtr(data));
    return ret;
  }

  public static float fann_test_data(fann ann, fann_train_data data) {
    float ret = SwigFannFloatPINVOKE.fann_test_data(fann.getCPtr(ann), fann_train_data.getCPtr(data));
    return ret;
  }

  public static fann_train_data fann_read_train_from_file(string filename) {
    global::System.IntPtr cPtr = SwigFannFloatPINVOKE.fann_read_train_from_file(filename);
    fann_train_data ret = (cPtr == global::System.IntPtr.Zero) ? null : new fann_train_data(cPtr, false);
    return ret;
  }

  public static fann_train_data fann_create_train(uint num_data, uint num_input, uint num_output) {
    global::System.IntPtr cPtr = SwigFannFloatPINVOKE.fann_create_train(num_data, num_input, num_output);
    fann_train_data ret = (cPtr == global::System.IntPtr.Zero) ? null : new fann_train_data(cPtr, false);
    return ret;
  }

  public static fann_train_data fann_create_train_pointer_array(uint num_data, uint num_input, SWIGTYPE_p_p_float input, uint num_output, SWIGTYPE_p_p_float output) {
    global::System.IntPtr cPtr = SwigFannFloatPINVOKE.fann_create_train_pointer_array(num_data, num_input, SWIGTYPE_p_p_float.getCPtr(input), num_output, SWIGTYPE_p_p_float.getCPtr(output));
    fann_train_data ret = (cPtr == global::System.IntPtr.Zero) ? null : new fann_train_data(cPtr, false);
    return ret;
  }

  public static fann_train_data fann_create_train_array(uint num_data, uint num_input, SWIGTYPE_p_float input, uint num_output, SWIGTYPE_p_float output) {
    global::System.IntPtr cPtr = SwigFannFloatPINVOKE.fann_create_train_array(num_data, num_input, SWIGTYPE_p_float.getCPtr(input), num_output, SWIGTYPE_p_float.getCPtr(output));
    fann_train_data ret = (cPtr == global::System.IntPtr.Zero) ? null : new fann_train_data(cPtr, false);
    return ret;
  }

  public static fann_train_data fann_create_train_from_callback(uint num_data, uint num_input, uint num_output, SWIGTYPE_p_f_unsigned_int_unsigned_int_unsigned_int_p_float_p_float__void user_function) {
    global::System.IntPtr cPtr = SwigFannFloatPINVOKE.fann_create_train_from_callback(num_data, num_input, num_output, SWIGTYPE_p_f_unsigned_int_unsigned_int_unsigned_int_p_float_p_float__void.getCPtr(user_function));
    fann_train_data ret = (cPtr == global::System.IntPtr.Zero) ? null : new fann_train_data(cPtr, false);
    return ret;
  }

  public static void fann_destroy_train(fann_train_data train_data) {
    SwigFannFloatPINVOKE.fann_destroy_train(fann_train_data.getCPtr(train_data));
  }

  public static SWIGTYPE_p_float fann_get_train_input(fann_train_data data, uint position) {
    global::System.IntPtr cPtr = SwigFannFloatPINVOKE.fann_get_train_input(fann_train_data.getCPtr(data), position);
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_float fann_get_train_output(fann_train_data data, uint position) {
    global::System.IntPtr cPtr = SwigFannFloatPINVOKE.fann_get_train_output(fann_train_data.getCPtr(data), position);
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public static void fann_shuffle_train_data(fann_train_data train_data) {
    SwigFannFloatPINVOKE.fann_shuffle_train_data(fann_train_data.getCPtr(train_data));
  }

  public static float fann_get_min_train_input(fann_train_data train_data) {
    float ret = SwigFannFloatPINVOKE.fann_get_min_train_input(fann_train_data.getCPtr(train_data));
    return ret;
  }

  public static float fann_get_max_train_input(fann_train_data train_data) {
    float ret = SwigFannFloatPINVOKE.fann_get_max_train_input(fann_train_data.getCPtr(train_data));
    return ret;
  }

  public static float fann_get_min_train_output(fann_train_data train_data) {
    float ret = SwigFannFloatPINVOKE.fann_get_min_train_output(fann_train_data.getCPtr(train_data));
    return ret;
  }

  public static float fann_get_max_train_output(fann_train_data train_data) {
    float ret = SwigFannFloatPINVOKE.fann_get_max_train_output(fann_train_data.getCPtr(train_data));
    return ret;
  }

  public static void fann_scale_train(fann ann, fann_train_data data) {
    SwigFannFloatPINVOKE.fann_scale_train(fann.getCPtr(ann), fann_train_data.getCPtr(data));
  }

  public static void fann_descale_train(fann ann, fann_train_data data) {
    SwigFannFloatPINVOKE.fann_descale_train(fann.getCPtr(ann), fann_train_data.getCPtr(data));
  }

  public static int fann_set_input_scaling_params(fann ann, fann_train_data data, float new_input_min, float new_input_max) {
    int ret = SwigFannFloatPINVOKE.fann_set_input_scaling_params(fann.getCPtr(ann), fann_train_data.getCPtr(data), new_input_min, new_input_max);
    return ret;
  }

  public static int fann_set_output_scaling_params(fann ann, fann_train_data data, float new_output_min, float new_output_max) {
    int ret = SwigFannFloatPINVOKE.fann_set_output_scaling_params(fann.getCPtr(ann), fann_train_data.getCPtr(data), new_output_min, new_output_max);
    return ret;
  }

  public static int fann_set_scaling_params(fann ann, fann_train_data data, float new_input_min, float new_input_max, float new_output_min, float new_output_max) {
    int ret = SwigFannFloatPINVOKE.fann_set_scaling_params(fann.getCPtr(ann), fann_train_data.getCPtr(data), new_input_min, new_input_max, new_output_min, new_output_max);
    return ret;
  }

  public static int fann_clear_scaling_params(fann ann) {
    int ret = SwigFannFloatPINVOKE.fann_clear_scaling_params(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_scale_input(fann ann, SWIGTYPE_p_float input_vector) {
    SwigFannFloatPINVOKE.fann_scale_input(fann.getCPtr(ann), SWIGTYPE_p_float.getCPtr(input_vector));
  }

  public static void fann_scale_output(fann ann, SWIGTYPE_p_float output_vector) {
    SwigFannFloatPINVOKE.fann_scale_output(fann.getCPtr(ann), SWIGTYPE_p_float.getCPtr(output_vector));
  }

  public static void fann_descale_input(fann ann, SWIGTYPE_p_float input_vector) {
    SwigFannFloatPINVOKE.fann_descale_input(fann.getCPtr(ann), SWIGTYPE_p_float.getCPtr(input_vector));
  }

  public static void fann_descale_output(fann ann, SWIGTYPE_p_float output_vector) {
    SwigFannFloatPINVOKE.fann_descale_output(fann.getCPtr(ann), SWIGTYPE_p_float.getCPtr(output_vector));
  }

  public static void fann_scale_input_train_data(fann_train_data train_data, float new_min, float new_max) {
    SwigFannFloatPINVOKE.fann_scale_input_train_data(fann_train_data.getCPtr(train_data), new_min, new_max);
  }

  public static void fann_scale_output_train_data(fann_train_data train_data, float new_min, float new_max) {
    SwigFannFloatPINVOKE.fann_scale_output_train_data(fann_train_data.getCPtr(train_data), new_min, new_max);
  }

  public static void fann_scale_train_data(fann_train_data train_data, float new_min, float new_max) {
    SwigFannFloatPINVOKE.fann_scale_train_data(fann_train_data.getCPtr(train_data), new_min, new_max);
  }

  public static fann_train_data fann_merge_train_data(fann_train_data data1, fann_train_data data2) {
    global::System.IntPtr cPtr = SwigFannFloatPINVOKE.fann_merge_train_data(fann_train_data.getCPtr(data1), fann_train_data.getCPtr(data2));
    fann_train_data ret = (cPtr == global::System.IntPtr.Zero) ? null : new fann_train_data(cPtr, false);
    return ret;
  }

  public static fann_train_data fann_duplicate_train_data(fann_train_data data) {
    global::System.IntPtr cPtr = SwigFannFloatPINVOKE.fann_duplicate_train_data(fann_train_data.getCPtr(data));
    fann_train_data ret = (cPtr == global::System.IntPtr.Zero) ? null : new fann_train_data(cPtr, false);
    return ret;
  }

  public static fann_train_data fann_subset_train_data(fann_train_data data, uint pos, uint length) {
    global::System.IntPtr cPtr = SwigFannFloatPINVOKE.fann_subset_train_data(fann_train_data.getCPtr(data), pos, length);
    fann_train_data ret = (cPtr == global::System.IntPtr.Zero) ? null : new fann_train_data(cPtr, false);
    return ret;
  }

  public static uint fann_length_train_data(fann_train_data data) {
    uint ret = SwigFannFloatPINVOKE.fann_length_train_data(fann_train_data.getCPtr(data));
    return ret;
  }

  public static uint fann_num_input_train_data(fann_train_data data) {
    uint ret = SwigFannFloatPINVOKE.fann_num_input_train_data(fann_train_data.getCPtr(data));
    return ret;
  }

  public static uint fann_num_output_train_data(fann_train_data data) {
    uint ret = SwigFannFloatPINVOKE.fann_num_output_train_data(fann_train_data.getCPtr(data));
    return ret;
  }

  public static int fann_save_train(fann_train_data data, string filename) {
    int ret = SwigFannFloatPINVOKE.fann_save_train(fann_train_data.getCPtr(data), filename);
    return ret;
  }

  public static int fann_save_train_to_fixed(fann_train_data data, string filename, uint decimal_point) {
    int ret = SwigFannFloatPINVOKE.fann_save_train_to_fixed(fann_train_data.getCPtr(data), filename, decimal_point);
    return ret;
  }

  public static fann_train_enum fann_get_training_algorithm(fann ann) {
    fann_train_enum ret = (fann_train_enum)SwigFannFloatPINVOKE.fann_get_training_algorithm(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_set_training_algorithm(fann ann, fann_train_enum training_algorithm) {
    SwigFannFloatPINVOKE.fann_set_training_algorithm(fann.getCPtr(ann), (int)training_algorithm);
  }

  public static float fann_get_learning_rate(fann ann) {
    float ret = SwigFannFloatPINVOKE.fann_get_learning_rate(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_set_learning_rate(fann ann, float learning_rate) {
    SwigFannFloatPINVOKE.fann_set_learning_rate(fann.getCPtr(ann), learning_rate);
  }

  public static float fann_get_learning_momentum(fann ann) {
    float ret = SwigFannFloatPINVOKE.fann_get_learning_momentum(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_set_learning_momentum(fann ann, float learning_momentum) {
    SwigFannFloatPINVOKE.fann_set_learning_momentum(fann.getCPtr(ann), learning_momentum);
  }

  public static fann_activationfunc_enum fann_get_activation_function(fann ann, int layer, int neuron) {
    fann_activationfunc_enum ret = (fann_activationfunc_enum)SwigFannFloatPINVOKE.fann_get_activation_function(fann.getCPtr(ann), layer, neuron);
    return ret;
  }

  public static void fann_set_activation_function(fann ann, fann_activationfunc_enum activation_function, int layer, int neuron) {
    SwigFannFloatPINVOKE.fann_set_activation_function(fann.getCPtr(ann), (int)activation_function, layer, neuron);
  }

  public static void fann_set_activation_function_layer(fann ann, fann_activationfunc_enum activation_function, int layer) {
    SwigFannFloatPINVOKE.fann_set_activation_function_layer(fann.getCPtr(ann), (int)activation_function, layer);
  }

  public static void fann_set_activation_function_hidden(fann ann, fann_activationfunc_enum activation_function) {
    SwigFannFloatPINVOKE.fann_set_activation_function_hidden(fann.getCPtr(ann), (int)activation_function);
  }

  public static void fann_set_activation_function_output(fann ann, fann_activationfunc_enum activation_function) {
    SwigFannFloatPINVOKE.fann_set_activation_function_output(fann.getCPtr(ann), (int)activation_function);
  }

  public static float fann_get_activation_steepness(fann ann, int layer, int neuron) {
    float ret = SwigFannFloatPINVOKE.fann_get_activation_steepness(fann.getCPtr(ann), layer, neuron);
    return ret;
  }

  public static void fann_set_activation_steepness(fann ann, float steepness, int layer, int neuron) {
    SwigFannFloatPINVOKE.fann_set_activation_steepness(fann.getCPtr(ann), steepness, layer, neuron);
  }

  public static void fann_set_activation_steepness_layer(fann ann, float steepness, int layer) {
    SwigFannFloatPINVOKE.fann_set_activation_steepness_layer(fann.getCPtr(ann), steepness, layer);
  }

  public static void fann_set_activation_steepness_hidden(fann ann, float steepness) {
    SwigFannFloatPINVOKE.fann_set_activation_steepness_hidden(fann.getCPtr(ann), steepness);
  }

  public static void fann_set_activation_steepness_output(fann ann, float steepness) {
    SwigFannFloatPINVOKE.fann_set_activation_steepness_output(fann.getCPtr(ann), steepness);
  }

  public static fann_errorfunc_enum fann_get_train_error_function(fann ann) {
    fann_errorfunc_enum ret = (fann_errorfunc_enum)SwigFannFloatPINVOKE.fann_get_train_error_function(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_set_train_error_function(fann ann, fann_errorfunc_enum train_error_function) {
    SwigFannFloatPINVOKE.fann_set_train_error_function(fann.getCPtr(ann), (int)train_error_function);
  }

  public static fann_stopfunc_enum fann_get_train_stop_function(fann ann) {
    fann_stopfunc_enum ret = (fann_stopfunc_enum)SwigFannFloatPINVOKE.fann_get_train_stop_function(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_set_train_stop_function(fann ann, fann_stopfunc_enum train_stop_function) {
    SwigFannFloatPINVOKE.fann_set_train_stop_function(fann.getCPtr(ann), (int)train_stop_function);
  }

  public static float fann_get_bit_fail_limit(fann ann) {
    float ret = SwigFannFloatPINVOKE.fann_get_bit_fail_limit(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_set_bit_fail_limit(fann ann, float bit_fail_limit) {
    SwigFannFloatPINVOKE.fann_set_bit_fail_limit(fann.getCPtr(ann), bit_fail_limit);
  }

  public static void fann_set_callback(fann ann, SWIGTYPE_p_f_p_fann_p_fann_train_data_unsigned_int_unsigned_int_float_unsigned_int__int callback) {
    SwigFannFloatPINVOKE.fann_set_callback(fann.getCPtr(ann), SWIGTYPE_p_f_p_fann_p_fann_train_data_unsigned_int_unsigned_int_float_unsigned_int__int.getCPtr(callback));
  }

  public static float fann_get_quickprop_decay(fann ann) {
    float ret = SwigFannFloatPINVOKE.fann_get_quickprop_decay(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_set_quickprop_decay(fann ann, float quickprop_decay) {
    SwigFannFloatPINVOKE.fann_set_quickprop_decay(fann.getCPtr(ann), quickprop_decay);
  }

  public static float fann_get_quickprop_mu(fann ann) {
    float ret = SwigFannFloatPINVOKE.fann_get_quickprop_mu(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_set_quickprop_mu(fann ann, float quickprop_mu) {
    SwigFannFloatPINVOKE.fann_set_quickprop_mu(fann.getCPtr(ann), quickprop_mu);
  }

  public static float fann_get_rprop_increase_factor(fann ann) {
    float ret = SwigFannFloatPINVOKE.fann_get_rprop_increase_factor(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_set_rprop_increase_factor(fann ann, float rprop_increase_factor) {
    SwigFannFloatPINVOKE.fann_set_rprop_increase_factor(fann.getCPtr(ann), rprop_increase_factor);
  }

  public static float fann_get_rprop_decrease_factor(fann ann) {
    float ret = SwigFannFloatPINVOKE.fann_get_rprop_decrease_factor(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_set_rprop_decrease_factor(fann ann, float rprop_decrease_factor) {
    SwigFannFloatPINVOKE.fann_set_rprop_decrease_factor(fann.getCPtr(ann), rprop_decrease_factor);
  }

  public static float fann_get_rprop_delta_min(fann ann) {
    float ret = SwigFannFloatPINVOKE.fann_get_rprop_delta_min(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_set_rprop_delta_min(fann ann, float rprop_delta_min) {
    SwigFannFloatPINVOKE.fann_set_rprop_delta_min(fann.getCPtr(ann), rprop_delta_min);
  }

  public static float fann_get_rprop_delta_max(fann ann) {
    float ret = SwigFannFloatPINVOKE.fann_get_rprop_delta_max(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_set_rprop_delta_max(fann ann, float rprop_delta_max) {
    SwigFannFloatPINVOKE.fann_set_rprop_delta_max(fann.getCPtr(ann), rprop_delta_max);
  }

  public static float fann_get_rprop_delta_zero(fann ann) {
    float ret = SwigFannFloatPINVOKE.fann_get_rprop_delta_zero(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_set_rprop_delta_zero(fann ann, float rprop_delta_max) {
    SwigFannFloatPINVOKE.fann_set_rprop_delta_zero(fann.getCPtr(ann), rprop_delta_max);
  }

  public static float fann_get_sarprop_weight_decay_shift(fann ann) {
    float ret = SwigFannFloatPINVOKE.fann_get_sarprop_weight_decay_shift(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_set_sarprop_weight_decay_shift(fann ann, float sarprop_weight_decay_shift) {
    SwigFannFloatPINVOKE.fann_set_sarprop_weight_decay_shift(fann.getCPtr(ann), sarprop_weight_decay_shift);
  }

  public static float fann_get_sarprop_step_error_threshold_factor(fann ann) {
    float ret = SwigFannFloatPINVOKE.fann_get_sarprop_step_error_threshold_factor(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_set_sarprop_step_error_threshold_factor(fann ann, float sarprop_step_error_threshold_factor) {
    SwigFannFloatPINVOKE.fann_set_sarprop_step_error_threshold_factor(fann.getCPtr(ann), sarprop_step_error_threshold_factor);
  }

  public static float fann_get_sarprop_step_error_shift(fann ann) {
    float ret = SwigFannFloatPINVOKE.fann_get_sarprop_step_error_shift(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_set_sarprop_step_error_shift(fann ann, float sarprop_step_error_shift) {
    SwigFannFloatPINVOKE.fann_set_sarprop_step_error_shift(fann.getCPtr(ann), sarprop_step_error_shift);
  }

  public static float fann_get_sarprop_temperature(fann ann) {
    float ret = SwigFannFloatPINVOKE.fann_get_sarprop_temperature(fann.getCPtr(ann));
    return ret;
  }

  public static void fann_set_sarprop_temperature(fann ann, float sarprop_temperature) {
    SwigFannFloatPINVOKE.fann_set_sarprop_temperature(fann.getCPtr(ann), sarprop_temperature);
  }

  public static float train_epoch_batch_parallel(fann ann, fann_train_data data, uint threadnumb) {
    float ret = SwigFannFloatPINVOKE.train_epoch_batch_parallel__SWIG_0(fann.getCPtr(ann), fann_train_data.getCPtr(data), threadnumb);
    return ret;
  }

  public static float train_epoch_irpropm_parallel(fann ann, fann_train_data data, uint threadnumb) {
    float ret = SwigFannFloatPINVOKE.train_epoch_irpropm_parallel__SWIG_0(fann.getCPtr(ann), fann_train_data.getCPtr(data), threadnumb);
    return ret;
  }

  public static float train_epoch_quickprop_parallel(fann ann, fann_train_data data, uint threadnumb) {
    float ret = SwigFannFloatPINVOKE.train_epoch_quickprop_parallel__SWIG_0(fann.getCPtr(ann), fann_train_data.getCPtr(data), threadnumb);
    return ret;
  }

  public static float train_epoch_sarprop_parallel(fann ann, fann_train_data data, uint threadnumb) {
    float ret = SwigFannFloatPINVOKE.train_epoch_sarprop_parallel__SWIG_0(fann.getCPtr(ann), fann_train_data.getCPtr(data), threadnumb);
    return ret;
  }

  public static float train_epoch_incremental_mod(fann ann, fann_train_data data) {
    float ret = SwigFannFloatPINVOKE.train_epoch_incremental_mod__SWIG_0(fann.getCPtr(ann), fann_train_data.getCPtr(data));
    return ret;
  }

  public static float train_epoch_batch_parallel(fann ann, fann_train_data data, uint threadnumb, FloatVectorVector predicted_outputs) {
    float ret = SwigFannFloatPINVOKE.train_epoch_batch_parallel__SWIG_1(fann.getCPtr(ann), fann_train_data.getCPtr(data), threadnumb, FloatVectorVector.getCPtr(predicted_outputs));
    if (SwigFannFloatPINVOKE.SWIGPendingException.Pending) throw SwigFannFloatPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float train_epoch_irpropm_parallel(fann ann, fann_train_data data, uint threadnumb, FloatVectorVector predicted_outputs) {
    float ret = SwigFannFloatPINVOKE.train_epoch_irpropm_parallel__SWIG_1(fann.getCPtr(ann), fann_train_data.getCPtr(data), threadnumb, FloatVectorVector.getCPtr(predicted_outputs));
    if (SwigFannFloatPINVOKE.SWIGPendingException.Pending) throw SwigFannFloatPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float train_epoch_quickprop_parallel(fann ann, fann_train_data data, uint threadnumb, FloatVectorVector predicted_outputs) {
    float ret = SwigFannFloatPINVOKE.train_epoch_quickprop_parallel__SWIG_1(fann.getCPtr(ann), fann_train_data.getCPtr(data), threadnumb, FloatVectorVector.getCPtr(predicted_outputs));
    if (SwigFannFloatPINVOKE.SWIGPendingException.Pending) throw SwigFannFloatPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float train_epoch_sarprop_parallel(fann ann, fann_train_data data, uint threadnumb, FloatVectorVector predicted_outputs) {
    float ret = SwigFannFloatPINVOKE.train_epoch_sarprop_parallel__SWIG_1(fann.getCPtr(ann), fann_train_data.getCPtr(data), threadnumb, FloatVectorVector.getCPtr(predicted_outputs));
    if (SwigFannFloatPINVOKE.SWIGPendingException.Pending) throw SwigFannFloatPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float train_epoch_incremental_mod(fann ann, fann_train_data data, FloatVectorVector predicted_outputs) {
    float ret = SwigFannFloatPINVOKE.train_epoch_incremental_mod__SWIG_1(fann.getCPtr(ann), fann_train_data.getCPtr(data), FloatVectorVector.getCPtr(predicted_outputs));
    if (SwigFannFloatPINVOKE.SWIGPendingException.Pending) throw SwigFannFloatPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float test_data_parallel(fann ann, fann_train_data data, uint threadnumb) {
    float ret = SwigFannFloatPINVOKE.test_data_parallel__SWIG_0(fann.getCPtr(ann), fann_train_data.getCPtr(data), threadnumb);
    return ret;
  }

  public static float test_data_parallel(fann ann, fann_train_data data, uint threadnumb, FloatVectorVector predicted_outputs) {
    float ret = SwigFannFloatPINVOKE.test_data_parallel__SWIG_1(fann.getCPtr(ann), fann_train_data.getCPtr(data), threadnumb, FloatVectorVector.getCPtr(predicted_outputs));
    if (SwigFannFloatPINVOKE.SWIGPendingException.Pending) throw SwigFannFloatPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_FILE fopen(string filename, string mode) {
    global::System.IntPtr cPtr = SwigFannFloatPINVOKE.fopen(filename, mode);
    SWIGTYPE_p_FILE ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FILE(cPtr, false);
    return ret;
  }

}

}
