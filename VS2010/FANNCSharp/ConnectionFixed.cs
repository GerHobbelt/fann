//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------
/*
 * Title: FANN C# Connection int
 */
using FannWrapperFixed;
namespace FANNCSharp
{
    /* Class: ConnectionFixed

        Describes a connection between two neurons and its weight

        FromNeuron - Unique number used to identify source neuron
        ToNeuron - Unique number used to identify destination neuron
        Weight - The numerical value of the weight

        See Also:
            <NeuralNetFixed.Connections>

       This structure appears in FANN >= 2.1.0
    */
    public class ConnectionFixed : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal ConnectionFixed()
        {
            FromNeuron = 0;
            ToNeuron = 0;
            Weight = 0;
        }
        /* Constructor: ConnectionFixed

            Creates a connection with the specified parameters

            Parameters:
                fromNeuron - Unique number used to identify source neuron
                toNeuron - Unique number used to identify destination neuron
                weight - The numerical value of the weight

            Example:
              >ConnectionFixed connection(2, 7, 1);
         */
        public ConnectionFixed(uint fromNeuron, uint toNeuron, int weight)
        {
            FromNeuron = fromNeuron;
            ToNeuron = toNeuron;
            Weight = weight;
        }
        internal ConnectionFixed(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ConnectionFixed obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~ConnectionFixed()
        {
            Dispose();
        }

        /* Method: Dispose
        
            Destructs the connection. Must be called manually.
        */
        public virtual void Dispose()
        {
            lock (this)
            {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        fannfixedPINVOKE.delete_ConnectionFixed(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }
        /* Property: FromNeuron
           Unique number used to identify source neuron
         */
        public uint FromNeuron
        {
            set
            {
                fannfixedPINVOKE.ConnectionFixed_FromNeuron_set(swigCPtr, value);
            }
            get
            {
                uint ret = fannfixedPINVOKE.ConnectionFixed_FromNeuron_get(swigCPtr);
                return ret;
            }
        }
        /* Property: ToNeuron
           Unique number used to identify destination neuron
         */
        public uint ToNeuron
        {
            set
            {
                fannfixedPINVOKE.ConnectionFixed_ToNeuron_set(swigCPtr, value);
            }
            get
            {
                uint ret = fannfixedPINVOKE.ConnectionFixed_ToNeuron_get(swigCPtr);
                return ret;
            }
        }
        /* Property: Weight
           The numerical value of the weight
         */
        public int Weight
        {
            set
            {
                fannfixedPINVOKE.ConnectionFixed_Weight_set(swigCPtr, value);
            }
            get
            {
                int ret = fannfixedPINVOKE.ConnectionFixed_Weight_get(swigCPtr);
                return ret;
            }
        }

    }

}
